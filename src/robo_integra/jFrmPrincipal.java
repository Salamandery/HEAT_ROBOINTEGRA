/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package robo_integra;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;

/**
 *
 * @author rodolfo.abreu
 */
public class jFrmPrincipal extends dbConnect {
    private static Connection con;
    private static PreparedStatement stmt;
    private static ResultSet rs;
    private static ResultSetMetaData meta;
    
    private static DefaultTableModel Table;
    private static DefaultTableModel Table2;
    private static DefaultTableModel Table3;
    private String stats;
    
    private static TrayIcon trayIcon = null;
    private SystemTray tray = SystemTray.getSystemTray();

    private static final Timer timer = new Timer();
    /**
     * Creates new form jFrmPrincipal
     * @param title
     * @param msg
     * @param messageType
     */
    
    private static void ShowMessageListener(String title, String msg, TrayIcon.MessageType messageType) {
        
        trayIcon.displayMessage(title, msg, messageType);
    }
    
    public jFrmPrincipal() {
        initComponents();
        Table = (DefaultTableModel) jTbdb1.getModel();
        Table2 = (DefaultTableModel) jTbdb2.getModel();
        Table3 = (DefaultTableModel) jTbdb3.getModel();
        int delay = 5000;
        int interval = 5000;
        // define ico
        setIconImages(WinIcon());
        // define stats
        stats = "aberta";
        // verifica se o sistema aceita sistema de trayicon
        if (SystemTray.isSupported()) {

            //setando o icone
            Image image = Toolkit.getDefaultToolkit().getImage("C:/AtomicCodes/Sys/Logo.png");
            image = image.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
            //ImageIcon logo = new ImageIcon(image);
            // criando popup
            PopupMenu popup = new PopupMenu("Menu de Opções");
            // criando tray icon e suas configuraçoes
            trayIcon = new TrayIcon(image, "Saturno System Server: integração em andamento...", popup);
            trayIcon.setImageAutoSize(true);

            try {

                tray.add(trayIcon);
                jFrmPrincipal.ShowMessageListener("Notificação Saturno System Server:", "Seja Bem-vindo ao sistema Saturno de Envio. Estarei cuidando de tudo para você..", TrayIcon.MessageType.NONE);
            } catch (AWTException ex) {
                jLblInfo.setText("Erro.. " +ex.getMessage());
            }

            //listener para que a janela se abra com
            //o clique do mouse
            trayIcon.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (stats.equals("aberta") && isVisible()) {
                        //esconde a janela
                        setVisible(false);
                        stats = "minimiza";
                    } else {
                        //reabre a janela
                        setVisible(true);
                        //quando a janela for reaberta
                        setExtendedState(NORMAL);
                        toFront();
                        stats = "aberta";
                    }
                }

            });
        }
        
        
        timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    // colocar tarefas aqui ...
                    getProduto();
                    getFornecedor();
                    getOrdServico();
                }
        }, delay, interval);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLblError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLblNew = new javax.swing.JLabel();
        jPnlInfo = new javax.swing.JPanel();
        jLblInfo = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPGrid1 = new javax.swing.JScrollPane();
        jTbdb1 = new javax.swing.JTable();
        jScrollPGrid2 = new javax.swing.JScrollPane();
        jTbdb2 = new javax.swing.JTable();
        jScrollPGrid3 = new javax.swing.JScrollPane();
        jTbdb3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HEAT - integração F71");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("INTEGRAÇÃO MV X SYS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Erros:");

        jLblError.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLblError.setText("0");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Novo Reg.:");

        jLblNew.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLblNew.setText("0");

        jPnlInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLblInfo.setText("Processando...");

        javax.swing.GroupLayout jPnlInfoLayout = new javax.swing.GroupLayout(jPnlInfo);
        jPnlInfo.setLayout(jPnlInfoLayout);
        jPnlInfoLayout.setHorizontalGroup(
            jPnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPnlInfoLayout.setVerticalGroup(
            jPnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLblInfo, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTbdb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descricao", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPGrid1.setViewportView(jTbdb1);
        if (jTbdb1.getColumnModel().getColumnCount() > 0) {
            jTbdb1.getColumnModel().getColumn(0).setMinWidth(120);
            jTbdb1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTbdb1.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        jTabbedPane.addTab("Produtos", jScrollPGrid1);

        jTbdb2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descricao"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPGrid2.setViewportView(jTbdb2);
        if (jTbdb2.getColumnModel().getColumnCount() > 0) {
            jTbdb2.getColumnModel().getColumn(0).setMinWidth(120);
            jTbdb2.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTbdb2.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        jTabbedPane.addTab("Fornecedores", jScrollPGrid2);

        jTbdb3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descricao"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPGrid3.setViewportView(jTbdb3);
        if (jTbdb3.getColumnModel().getColumnCount() > 0) {
            jTbdb3.getColumnModel().getColumn(0).setMinWidth(120);
            jTbdb3.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTbdb3.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        jTabbedPane.addTab("Ord. Serviço", jScrollPGrid3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(80, 80, 80)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblError)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLblNew)
                        .addComponent(jLabel2)
                        .addComponent(jLblError))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     */
    
    private List<Image> WinIcon() {
        List<Image> icons = new ArrayList<>();
        ImageIcon ico = new ImageIcon("C:/AtomicCodes/Sys/Logo.png");
        Image icon = ico.getImage();
        icon = icon.getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH);
        icons.add(icon);
        
        icon = icon.getScaledInstance(32, 32, java.awt.Image.SCALE_SMOOTH);
        icons.add(icon);
        
        icon = icon.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
        icons.add(icon);
        
        
        return icons;
    }
    
    private static void ClearTable() {
            Table.setRowCount(0);
            Table2.setRowCount(0);
            Table3.setRowCount(0);
            jLblInfo.setText("Processando...");
    }
    
    private static void getFornecedor() {
        try {
            con = getConnect();
            
            stmt = con.prepareStatement("SELECT * "
                    + "FROM FORNECEDOR "
                    + "ORDER BY CD_FORNECEDOR DESC");
            
            //stmt.setString(1, "S");
            rs = stmt.executeQuery();
            meta = rs.getMetaData();
            int cRow = Table2.getRowCount();
            int count = meta.getColumnCount();
            String Row;
            //System.out.println(count);
            
            if (rs.next()) {
                
                if (cRow == 0) { 
                    Table2.addRow(new String[]{rs.getString("CD_FORNECEDOR"), rs.getString("NM_FORNECEDOR")});
                } else if (!Table2.getValueAt(cRow-1, 0).toString().equals(rs.getString("CD_FORNECEDOR"))) {
                    if (cRow > 16) {
                        ClearTable();
                    }
                    Table2.addRow(new String[]{rs.getString("CD_FORNECEDOR"), rs.getString("NM_FORNECEDOR")});
                } else {
                    if (cRow > 16) { 
                        ClearTable();
                    }
                    Table2.addRow(new String[]{rs.getString("CD_FORNECEDOR"), "Não há novos produtos a serem processados...    "});
                }
                
                File file = new File("C:/AtomicCodes/RoboF71/Fornecedores/"+rs.getString("cd_fornecedor")+".xml");

                    //System.out.println(Table.getValueAt(cRow-1, 0));
                    //if (!Table.getValueAt(cRow-1, 0).toString().equals(rs.getString("CD_PRODUTO"))) {
                        if (!file.exists()) {
                            
                            int n = Integer.parseInt(jLblNew.getText()) + 1;
                            //System.out.println(n);
                            jLblNew.setText(Integer.toString(n));
                            
                            try {
                                    FileWriter fr = new FileWriter("C:/AtomicCodes/RoboF71/Fornecedores/"+rs.getString("cd_fornecedor")+".xml");
                                    BufferedWriter br = new BufferedWriter(fr);
                                    br.write("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n");
                                    br.write("\t<PRODUTO>\n");

                                    for (int i = 1; i <= count; i++) {
                                        //System.out.println(i);
                                        br.write("\t\t<"+meta.getColumnName(i)+">");
                                        rs.getString(meta.getColumnName(i));
                                        if (rs.wasNull()) {
                                            Row = "NULL";
                                        } else {
                                            Row = rs.getString(meta.getColumnName(i));
                                        }
                                        br.write(Row);
                                        br.write("</"+meta.getColumnName(i)+">\n");
                                    }

                                    br.write("\t</PRODUTO>");
                                    br.close();
                                    fr.close();
                                    
                                    EnviaLagos(file, "/fornecedor/");
                                    
                            } catch (IOException ex) {
                                System.out.println(ex.getMessage());
                                jLblInfo.setText("Erro.. " +ex.getMessage());
                            }
                        }
                    //}
            }
            
            FechaConnect(con,stmt,rs);
            //setFile();
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
            jLblInfo.setText("Erro.. " +ex.getMessage());
        }
    }
    
    private static void getOrdServico() {
        try {
            con = getConnect();
            
            stmt = con.prepareStatement("SELECT o.cd_os cdOS, o.ds_servico dsServico, TO_CHAR(o.dt_pedido, 'dd/mm/yyyy hh24:mi:ss') dtPedido, " +
                                        "       s.nm_setor nmSetor, f.ds_oficina dsOficina, l.ds_localidade dsLocalidade, " +
                                        "       DECODE(O.TP_SITUACAO, 'S', 'SOLICITACAO', 'D', 'CANCELADO', 'C', 'CONCLUIDO') tpSituacao " +
                                        "FROM   solicitacao_os o, oficina f, " +
                                        "       setor s, localidade l " +
                                        "WHERE s.cd_setor = o.cd_setor " +
                                        "AND l.cd_localidade = o.cd_localidade " +
                                        "AND l.cd_setor = s.cd_setor " +
                                        "AND f.cd_oficina = o.cd_oficina " +
                                        "AND to_char(o.dt_pedido, 'dd/mm/yyyy') = To_Char(SYSDATE, 'dd/mm/yyyy') " +
                                        "AND f.cd_oficina IN (2, 3, 4, 6, 7, 34, 20, 18, 19, 25, 26, 11, 12, 13, 14, 15, 24) "
                                        + "ORDER BY 3 DESC ");
            
            //stmt.setString(1, "S");
            rs = stmt.executeQuery();
            meta = rs.getMetaData();
            int cRow = Table3.getRowCount();
            int count = meta.getColumnCount();
            String Row;
            //System.out.println(count);
            
            if (rs.next()) {
                
                if (cRow == 0) { 
                    Table3.addRow(new String[]{rs.getString("cdOS"), rs.getString("dsOficina")});
                } else if (!Table3.getValueAt(cRow-1, 0).toString().equals(rs.getString("cdOS"))) {
                    if (cRow > 16) {
                        ClearTable();
                    }
                    Table3.addRow(new String[]{rs.getString("cdOS"), rs.getString("dsOficina")});
                } else {
                    if (cRow > 16) { 
                        ClearTable();
                    }
                    Table3.addRow(new String[]{rs.getString("cdOS"), "Não há novos serviços a serem processados...    "});
                }
                
                File file = new File("C:/AtomicCodes/SIGOS/SAI/"+rs.getString("cdOS")+".xml");

                    //System.out.println(Table.getValueAt(cRow-1, 0));
                    //if (!Table.getValueAt(cRow-1, 0).toString().equals(rs.getString("CD_PRODUTO"))) {
                        if (!file.exists()) {
                            
                            int n = Integer.parseInt(jLblNew.getText()) + 1;
                            //System.out.println(n);
                            jLblNew.setText(Integer.toString(n));
                            
                            try {
                                    FileWriter fr = new FileWriter("C:/AtomicCodes/SIGOS/SAI/"+rs.getString("cdOS")+".xml");
                                    BufferedWriter br = new BufferedWriter(fr);
                                    br.write("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n");
                                    br.write("\t<OS>\n");

                                    for (int i = 1; i <= count; i++) {
                                        //System.out.println(i);
                                        br.write("\t\t<"+meta.getColumnName(i)+">");
                                        rs.getString(meta.getColumnName(i));
                                        if (rs.wasNull()) {
                                            Row = "NULL";
                                        } else {
                                            Row = rs.getString(meta.getColumnName(i));
                                        }
                                        br.write(Row);
                                        br.write("</"+meta.getColumnName(i)+">\n");
                                    }

                                    br.write("\t</OS>");
                                    br.close();
                                    fr.close();
                                    
                                    EnviaSIGOS(file);
                                    
                            } catch (IOException ex) {
                                System.out.println(ex.getMessage());
                                jLblInfo.setText("Erro.. " +ex.getMessage());
                            }
                        }
                    //}
            }
            
            FechaConnect(con,stmt,rs);
            //setFile();
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
            jLblInfo.setText("Erro.. " +ex.getMessage());
        }
    }
    
    private static void getProduto() {
        try {
            con = getConnect();
            
            stmt = con.prepareStatement("SELECT * "
                    + "FROM PRODUTO WHERE tp_ativo = ? "
                    + "ORDER by DT_CADASTRO DESC");
            
            stmt.setString(1, "S");
            rs = stmt.executeQuery();
            meta = rs.getMetaData();
            int cRow = Table.getRowCount();
            int count = meta.getColumnCount();
            String Row;
            //System.out.println(count);
            
            if (rs.next()) {
                
                if (cRow == 0) { 
                    Table.addRow(new String[]{rs.getString("CD_PRODUTO"), rs.getString("DS_PRODUTO"), rs.getString("DT_CADASTRO")});
                } else if (!Table.getValueAt(cRow-1, 0).toString().equals(rs.getString("CD_PRODUTO"))) {
                    if (cRow > 16) {
                        ClearTable();
                    }
                    Table.addRow(new String[]{rs.getString("CD_PRODUTO"), rs.getString("DS_PRODUTO"), rs.getString("DT_CADASTRO")});
                } else {
                    if (cRow > 16) { 
                        ClearTable();
                    }
                    Table.addRow(new String[]{rs.getString("CD_PRODUTO"), "Não há novos produtos a serem processados...    ", " "});
                }
                
                File file = new File("C:/AtomicCodes/RoboF71/Produtos/"+rs.getString("cd_produto")+".xml");

                    //System.out.println(Table.getValueAt(cRow-1, 0));
                    //if (!Table.getValueAt(cRow-1, 0).toString().equals(rs.getString("CD_PRODUTO"))) {
                        if (!file.exists()) {
                            
                            int n = Integer.parseInt(jLblNew.getText()) + 1;
                            //System.out.println(n);
                            jLblNew.setText(Integer.toString(n));
                            
                            try {
                                    FileWriter fr = new FileWriter("C:/AtomicCodes/RoboF71/Produtos/"+rs.getString("cd_produto")+".xml");
                                    BufferedWriter br = new BufferedWriter(fr);
                                    br.write("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n");
                                    br.write("\t<PRODUTO>\n");

                                    for (int i = 1; i <= count; i++) {
                                        //System.out.println(i);
                                        br.write("\t\t<"+meta.getColumnName(i)+">");
                                        rs.getString(meta.getColumnName(i));
                                        if (rs.wasNull()) {
                                            Row = "NULL";
                                        } else {
                                            Row = rs.getString(meta.getColumnName(i));
                                        }
                                        br.write(Row);
                                        br.write("</"+meta.getColumnName(i)+">\n");
                                    }

                                    br.write("\t</PRODUTO>");
                                    br.close();
                                    fr.close();
                                    
                                    EnviaLagos(file, "/produto/");
                                    
                            } catch (IOException ex) {
                                System.out.println(ex.getMessage());
                                jLblInfo.setText("Erro.. " +ex.getMessage());
                            }
                        }
                    //}
            }
            
            FechaConnect(con,stmt,rs);
            //setFile();
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
            jLblInfo.setText("Erro.. " +ex.getMessage());
        }
    }
    
    private static void EnviaLagos(File file, String folder) {
        FTPsend(file, folder, "URL", "LOGIN", "PASS");
    }
    
    private static void EnviaSIGOS(File file, String folder) {
        FTPsend(file, folder, "URL", "LOGIN", "PASS");
    }
    
    private static void FTPsend(File file, String folder, String server, String user, String pass) {
        int port = 21;
 
        FTPClient ftpClient = new FTPClient();
        try {
 
            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
 
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
 
            File firstLocalFile = file;
 
            String firstRemoteFile = folder+file.getName();
            boolean done;
            
            try (InputStream inputStream = new FileInputStream(firstLocalFile)) {
                System.out.println("Enviando arquivo.. "+file);
                jFrmPrincipal.ShowMessageListener("Notificação Saturno System Server:", "Hmm... Encontramos um Registro novo, aguarde enquanto verifico as informações de envio.", TrayIcon.MessageType.INFO);
                jLblInfo.setText("Enviando arquivo via FTP.. Arquivo: " +file);
                done = ftpClient.storeFile(firstRemoteFile, inputStream);
            }
            
            if (done) {
                System.out.println("Arquivo enviado com sucesso.");
                jLblInfo.setText(file+"... Arquivo enviado com sucesso!");
                jFrmPrincipal.ShowMessageListener("Notificação Saturno System Server:", "Arquivo Enviado com Sucesso!", TrayIcon.MessageType.INFO);
            }
 
        } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            jLblInfo.setText("Erro.. " +ex.getMessage());
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                System.out.println("Error: " + ex.getMessage());
                jLblInfo.setText("Erro.. " +ex.getMessage());
            }
        }
    }
    
    private static void setFile() {
        try {
                try (FileReader inputFile = new FileReader("C:/AtomicCodes/Produtos/personlist.xml")) {
                    Scanner parser = new Scanner(inputFile);
                    while (parser.hasNextLine()) {
                        String line = parser.nextLine();
                        //System.out.println(line);
                    }

                }
            }
            catch (FileNotFoundException ex) {
                    System.out.println("File not found");
                    jLblInfo.setText("Erro.. Arquivo não encontrado" +ex.getMessage());
            }
        catch(IOException ex) {
                System.out.println("Unexpected I/O error occured.");
                jLblInfo.setText("Erro I/O ocorrido.. " +ex.getMessage());
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new jFrmPrincipal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLblError;
    private static javax.swing.JLabel jLblInfo;
    private static javax.swing.JLabel jLblNew;
    private javax.swing.JPanel jPnlInfo;
    private javax.swing.JScrollPane jScrollPGrid1;
    private javax.swing.JScrollPane jScrollPGrid2;
    private javax.swing.JScrollPane jScrollPGrid3;
    private javax.swing.JScrollPane jScrollPGrid4;
    private javax.swing.JTabbedPane jTabbedPane;
    private static javax.swing.JTable jTbdb1;
    private static javax.swing.JTable jTbdb2;
    private static javax.swing.JTable jTbdb3;
    // End of variables declaration//GEN-END:variables
}
